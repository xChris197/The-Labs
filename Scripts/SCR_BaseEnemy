using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class SCR_BaseEnemy : MonoBehaviour
{
    [SerializeField] private float health = 100f;
    [SerializeField] private float damage = 50f;

    private NavMeshAgent agent;
    [SerializeField] private GameObject playerOne;
    [SerializeField] private GameObject playerTwo;

    [SerializeField] private float distanceFromP1;
    private float distanceFromP2;

    private SCR_PlayerHealth healthOne;
    private SCR_PlayerHealth healthTwo;
    private SCR_MakerManager makerManager;
    private SCR_GameManager gameManager;

    [SerializeField] private float timeBetweenAttacks = 2f;
    [SerializeField] private bool inAttackRangeOne;
    [SerializeField] private bool inAttackRangeTwo;

    [SerializeField] private AudioSource swipeEffect;
    [SerializeField] private bool hasAttacked = false;
    void Awake()
    {
        playerOne = GameObject.FindGameObjectWithTag("PlayerOne");
        playerTwo = GameObject.FindGameObjectWithTag("PlayerTwo");
    }
    void Start()
    {
        makerManager = GameObject.FindGameObjectWithTag("Maker").GetComponent<SCR_MakerManager>();
        gameManager = GameObject.FindGameObjectWithTag("Game Manager").GetComponent<SCR_GameManager>();
        agent = GetComponent<NavMeshAgent>();
        healthOne = playerOne.GetComponent<SCR_PlayerHealth>();
        healthTwo = playerTwo.GetComponent<SCR_PlayerHealth>();
    }

    void Update()
    {
        if (health <= 0)
        {
            makerManager.currentKillCount++;
            Destroy(gameObject);
        }

        distanceFromP1 = Vector3.Distance(playerOne.transform.position, transform.position);
        distanceFromP2 = Vector3.Distance(playerTwo.transform.position, transform.position);

        if(distanceFromP1 <= 2f)
        {
            inAttackRangeOne = true;
        }
        else if(distanceFromP2 <= 2f)
        {
            inAttackRangeTwo = true;
        }
        else
        {
            inAttackRangeOne = false;
            inAttackRangeTwo = false;
        }


        if (!inAttackRangeOne && !inAttackRangeTwo)
        {
            Chasing();
        }
        if(inAttackRangeOne && !inAttackRangeTwo)
        {
            AttackingOne();
        }

        if(!inAttackRangeOne && inAttackRangeTwo)
        {
            AttackingTwo();
        }
    }

    void AttackingOne()
    {
        if(!hasAttacked)
        {
            hasAttacked = true;
            healthOne.TakeDamage(damage);
            swipeEffect.Play();

            StartCoroutine(ResetAttack());
        }
    }

    void AttackingTwo()
    {

        if (!hasAttacked)
        {
            hasAttacked = true;
            healthTwo.TakeDamage(damage);
            swipeEffect.Play();

            StartCoroutine(ResetAttack());
        }
    }

    void Chasing()
    {
        if(distanceFromP1 < distanceFromP2)
        {
            agent.SetDestination(playerOne.transform.position);
        }
        else if(distanceFromP1 > distanceFromP2)
        {
            agent.SetDestination(playerTwo.transform.position);

        }

        if(gameManager.bPlayerOneDead && !gameManager.bPlayerTwoDead)
        {
            agent.SetDestination(playerTwo.transform.position);
        }
        else if(!gameManager.bPlayerOneDead && gameManager.bPlayerTwoDead)
        {
            agent.SetDestination(playerOne.transform.position);
        }
    }

    IEnumerator ResetAttack()
    {
        yield return new WaitForSeconds(timeBetweenAttacks);
        hasAttacked = false;
    }

    public void TakeDamage(float damage)
    {
        health -= damage;
    }
}
